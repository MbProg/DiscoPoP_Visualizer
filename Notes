Functions: readable name plz
Dependency graph: in another tab? In same graph (too many edges)? When node is clicked?
Should loops display its function calls without being expanded?
How are function names mapped? (_Z3fooii, ii stants for two int parameters, what about double, complex etc...?,
  could parse the name with that info)
Why are globalVariableNames == localVariableNames in functions? What are these for in non-function CUs?
Is read/writeDataSize in Bytes? I want to change it to kB/mB/gB...etc in display (readability)
Should I display all functions on start?
I want to parse the datatypes from i32* to int for example. I need a table!
Can Nodes extend over several files? (what is x in x:row for? I can get the file from the ID, a fileID property would be better btw)

Assumptions:
  successorCU can only contain ID's of CU-nodes
  childrenNodes of CU-nodes can only contain Function-nodes
  Two CUs that contain the same line in code, will be children of the same node
  Nodes do not extend over several files


Problem:



TO-DO:
        // Add file selector
        // Reset-Graph position and scale button
        // Interval-Tree for nodes (optimize search for node from code)
        // Highlight selected nodes
        // Make button for CU-info toggle show whether CU-info is available
        // Show and highlight CU from code on right click
        Separate file-selector files by folder (remove path portion common to all)
        *Max-visible parents (configuration variable, lower for better graph performance in very large graphs)
        Add more color customization (Edges, selected Nodes ...)
        Deselect node (on outside click? on click again?)
        Test dependency graph
        Button for displaying all dependencies for visible CUs
        Make dependencies edges go to parents if the CU is not visible

Requests:
  Full ChildNodeCount of subtree / or full childCuCount of subtree
  predecessorCUs
  parentNodes
  read/write-datasize in loops and functions (aggregate of contained CUs)
  Add read/write data-size to non-CU-nodes (sum of all descendants)
